def is_palindrome(s):
    """Check if a string s is a palindrome."""
    return s == s[::-1]

def partition_palindromes(s):
    """Partition the string s into all possible substrings such that each substring is a palindrome."""
    def backtrack(start, path):
        if start == len(s):
            result.append(path[:])
            return
        for end in range(start + 1, len(s) + 1):
            substring = s[start:end]
            if is_palindrome(substring):
                path.append(substring)
                backtrack(end, path)
                path.pop()
    
    result = []
    backtrack(0, [])
    return result

# Example usage
s = "aab"
partitions = partition_palindromes(s)
print(f"All possible palindrome partitions for the string '{s}':")
for partition in partitions:
    print(partition)
